// Top-level build file where you can add configuration options common to all
// sub-projects/modules.
buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:1.0.0'
	}
}

allprojects {
	repositories {
		jcenter()
		mavenCentral()
	}
}

apply plugin: 'com.android.application'

repositories {
	maven {
		url "http://jitsi.github.com/otr4j/repository/"
	}
	jcenter()
	mavenCentral()
}

dependencies {
	compile project(':libs:minidns')
	compile project(':libs:openpgp-api-lib')
	compile project(':libs:MemorizingTrustManager')
	compile 'com.android.support:support-v13:19.1.0'
	compile 'org.bouncycastle:bcprov-jdk15on:1.50'
	compile 'net.java:otr4j:0.21'
	compile 'org.gnu.inet:libidn:1.15'
	compile 'com.google.zxing:core:3.1.0'
	compile 'com.google.zxing:android-integration:3.1.0'
}

android {
	compileSdkVersion 19
	buildToolsVersion "19.1"

	defaultConfig {
		minSdkVersion 14
		targetSdkVersion 19
		versionCode 40
		versionName "0.9.3"
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_7
		targetCompatibility JavaVersion.VERSION_1_7
	}

	//
	// To sign release builds, create the file `gradle.properties` in
	// $HOME/.gradle or in your project directory with this content:
	//
	// mStoreFile=/path/to/key.store
	// mStorePassword=xxx
	// mKeyAlias=alias
	// mKeyPassword=xxx
	//
	if (project.hasProperty('mStoreFile') &&
			project.hasProperty('mStorePassword') &&
			project.hasProperty('mKeyAlias') &&
			project.hasProperty('mKeyPassword')) {
		signingConfigs {
			release {
				storeFile file(mStoreFile)
					storePassword mStorePassword
					keyAlias mKeyAlias
					keyPassword mKeyPassword
			}
		}
		buildTypes.release.signingConfig = signingConfigs.release
	} else {
		buildTypes.release.signingConfig = null
	}

	applicationVariants.all { variant ->
		if (variant.name.equals('release')) {
			variant.outputs.each { output ->
				if (output.zipAlign != null) {
					output.zipAlign.outputFile = new File(output.outputFile.parent, rootProject.name + "-${variant.versionName}.apk")
				}
				output.packageApplication.outputFile = new File(output.outputFile.parent, output.packageApplication.outputFile.name
					.replace(".apk", "-${variant.versionName}.apk"))
			}
		}
	}

	lintOptions {
		disable 'MissingTranslation', 'InvalidPackage'
	}

	subprojects {

		afterEvaluate {
			if (getPlugins().hasPlugin('android') ||
					getPlugins().hasPlugin('android-library')) {

				configure(android.lintOptions) {
					disable 'AndroidGradlePluginVersion', 'MissingTranslation'
				}
			}

		}
	}
}
