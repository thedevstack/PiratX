// Top-level build file where you can add configuration options common to all
// sub-projects/modules.
buildscript {
    repositories {
        maven {
            url "https://mvn.thedevstack.de/mvn"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.9.3'
        classpath "com.diffplug.spotless:spotless-plugin-gradle:7.0.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:2.1.0"
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '4.1.1'
    // PLUGIN INSERT
}

apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'

repositories {
    maven {
        url "https://mvn.thedevstack.de/mvn"
    }
}

def tags = grgit.tag.list().findAll { it.dateTime != null }.sort { it.dateTime }

// ROOT INSERT

configurations {
    playstoreImplementation
    freeImplementation
    conversationsFreeImplementation
    monocleschatPlaystoreImplementation
    conversationsPlaystoreImplementation
    quicksyPlaystoreImplementation
    quicksyPlaystoreImplementation
    quicksyFreeImplementation
    quicksyImplementation
    piratxImplementation
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    implementation 'junit:junit:4.13.2'
    androidTestImplementation 'junit:junit:4.13.2'

    implementation "androidx.core:core:1.13.1"
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'

    implementation project(':libs:annotation')
    annotationProcessor project(':libs:annotation-processor')

    implementation 'androidx.viewpager:viewpager:1.0.0'

    monocleschatPlaystoreImplementation("com.android.installreferrer:installreferrer:2.2")
    monocleschatPlaystoreImplementation 'com.github.singpolyma:play-licensing:1c637ea03c'
    conversationsPlaystoreImplementation("com.android.installreferrer:installreferrer:2.2")
    quicksyPlaystoreImplementation 'com.google.android.gms:play-services-auth-api-phone:18.2.0'
    implementation 'com.github.open-keychain.open-keychain:openpgp-api:v5.7.1'
    implementation("com.github.CanHub:Android-Image-Cropper:2.2.0")
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.exifinterface:exifinterface:1.4.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "androidx.preference:preference:1.2.1"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'com.google.android.material:material:1.13.0-beta01'
    implementation 'androidx.work:work-runtime:2.10.0'

    implementation "androidx.emoji2:emoji2:1.5.0"
    piratxImplementation "androidx.emoji2:emoji2-bundled:1.5.0"
    implementation "androidx.emoji2:emoji2-emojipicker:1.5.0"

    implementation 'org.bouncycastle:bcmail-jdk18on:1.81'
    implementation 'com.google.zxing:core:3.5.3'
    implementation 'me.leolin:ShortcutBadger:1.1.22@aar'
    implementation 'org.whispersystems:signal-protocol-java:2.6.2'
    implementation "com.wefika:flowlayout:0.4.1"

    //noinspection GradleDependency
    implementation 'io.deepmedia.community:transcoder-android:0.11.1'

    implementation 'org.jxmpp:jxmpp-jid:1.0.3'
    implementation 'org.jxmpp:jxmpp-stringprep-libidn:1.0.3'
    implementation 'org.osmdroid:osmdroid-android:6.1.16'
    implementation 'org.hsluv:hsluv:0.2'
    implementation 'org.conscrypt:conscrypt-android:2.5.3'
    implementation 'me.drakeet.support:toastcompat:1.1.0'
    implementation "com.leinardi.android:speed-dial:3.3.0"

    implementation "com.squareup.retrofit2:retrofit:2.11.0"
    implementation "com.squareup.retrofit2:converter-gson:2.11.0"
    implementation "com.squareup.okhttp3:okhttp:4.12.0"

    implementation 'com.google.guava:guava:33.4.6-android'
    implementation 'io.michaelrocks:libphonenumber-android:8.13.52'
    implementation 'im.conversations.webrtc:webrtc-android:129.0.0'
    implementation 'io.github.nishkarsh:android-permissions:2.1.6'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.documentfile:documentfile:1.0.1'
    implementation 'androidx.browser:browser:1.8.0'
    implementation 'com.github.martin-stone:hsv-alpha-color-picker-android:3.1.0'
    implementation 'com.github.ipld:java-cid:v1.3.1'
    //implementation 'com.splitwise:tokenautocomplete:3.0.2'
    implementation 'com.github.singpolyma:TokenAutoComplete:bfa93780e0'
    implementation 'com.github.singpolyma:Better-Link-Movement-Method:393d35e453'
    implementation 'com.github.singpolyma:android-identicons:3361281bd4'
    implementation 'com.github.woltapp:blurhash:master'
    implementation 'com.caverock:androidsvg-aar:1.4'
    implementation 'org.tomlj:tomlj:1.1.0'
    implementation 'com.tbuonomo:dotsindicator:4.2'
    implementation 'com.github.singpolyma:OpenGraphParser:d0882eadb2'
    implementation 'me.xdrop:fuzzywuzzy:1.4.0'
    implementation 'net.fellbaum:jemoji:1.4.1'
    implementation "com.daimajia.swipelayout:library:1.2.0@aar"
    implementation 'com.github.bumptech.glide:glide:4.15.1' // For photo editor compatibility

    implementation 'com.github.natario1:Autocomplete:v1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.github.inusedname:AndroidPhotoFilters:1.0.7.2'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation 'com.mikepenz:materialdrawer:9.0.1'
    implementation 'org.jitsi:org.otr4j:0.23'
    implementation "com.github.pgreze:android-reactions:1.6"
    // Add Media3
    implementation "androidx.media3:media3-exoplayer:1.3.1"
    implementation "androidx.media3:media3-ui:1.3.1"
    implementation "androidx.media3:media3-session:1.3.1"
}

ext {
    preDexEnabled = System.getProperty("pre-dex", "true")
    abiCodes = ['armeabi-v7a': 1, 'x86': 2, 'x86_64': 3, 'arm64-v8a': 4]
}

android {
    namespace 'eu.siacs.conversations'
    compileSdk 35

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 35
        applicationId = "de.thedevstack.piratx"
        versionCode 5
        versionName "0.0.5"

        def xmppDomain = "jabber.thedevstack.de"
        buildConfigField "String", "PRIVACY_POLICY", "\"https://piratx.thedevstack.de/privacy.html\""
        buildConfigField "String", "XMPP_DOMAIN", "\"$xmppDomain\""
        buildConfigField "String", "SUPPORT_JID", "\"support@$xmppDomain\""
        buildConfigField "String", "HELP_URL", "\"https://piratx.thedevstack.de/help\""
        buildConfigField "String", "ONBOARDING_URL", "\"onboarding.thedevstack.de\""
        buildConfigField "String", "CHANNEL_DISCOVERY_URL", "\"https://search.jabber.network\""

        resValue "string", "applicationId", applicationId

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    splits {
        abi {
            universalApk true
            enable true
            reset()
            //noinspection ChromeOsAbiSupport
            include project.ext.abiCodes.keySet() as String[]
        }
    }

    configurations {
        implementation.exclude group: 'org.jetbrains' , module:'annotations'
    }

    dataBinding {
        enabled true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    flavorDimensions += "mode"
    flavorDimensions += "distribution"

    productFlavors {

        monocles {
            dimension "mode"
        }

        piratx {
            dimension "distribution"
        }
    }

    sourceSets {
        monocles {
            java {
                srcDir 'src/monocleschat/java'
                srcDir 'src/free/java'
                srcDir 'src/conversationsFree/java'
            }
            res {
                srcDir 'src/monocleschat/res'
            }
            manifest {
                srcFile 'src/monocleschat/AndroidManifest.xml'
            }
            aidl {
                srcDir 'src/monocleschat/aidl'
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            def appName = "PiratX Debug"

            buildConfigField "String", "APP_NAME", "\"$appName\""
            resValue "string", "app_name", appName
            resValue "string", "git_hash", grgit.head().abbreviatedId

            resValue "string", "applicationId", "${defaultConfig.applicationId}${applicationIdSuffix}"
        }

        dev {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug

            def appName = "PiratX Dev"
            buildConfigField "String", "APP_NAME", "\"$appName\""
            resValue "string", "app_name", appName
            resValue "string", "git_hash", grgit.head().abbreviatedId

            resValue "string", "applicationId", "${defaultConfig.applicationId}${applicationIdSuffix}"
        }

        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk.debugSymbolLevel = 'full'
        }
    }


    if (new File("signing.properties").exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(file("signing.properties")))

        signingConfigs {
            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keystore.alias']
                keyPassword props['keystore.password']
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    }

    lintOptions {
        disable 'MissingTranslation', 'InvalidPackage','AppCompatResource'
        abortOnError false
    }

    subprojects {

        afterEvaluate {
            if (getPlugins().hasPlugin('android') ||
                    getPlugins().hasPlugin('android-library')) {

                configure(android.lintOptions) {
                    disable 'AndroidGradlePluginVersion', 'MissingTranslation'
                    abortOnError false
                }
            }

        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/BCKEY.DSA', 'META-INF/BCKEY.SF', 'META-INF/versions/9/OSGI-INF/MANIFEST.MF', 'META-INF/LICENSE.md', 'META-INF/LICENSE-notice.md']
        }
    }
    lint {
        disable 'MissingTranslation', 'InvalidPackage', 'AppCompatResource'
    }
    buildFeatures {
        buildConfig true
    }

    android.applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI))
            if (baseAbiVersionCode != null) {
                output.versionCodeOverride = (100 * project.android.defaultConfig.versionCode) + baseAbiVersionCode
            } else {
                //output.versionCodeOverride = (100 * project.android.defaultConfig.versionCode) + grgit.log(includes: ["HEAD"], excludes: [tags.last()]).size()
            }
        }

    }
}
